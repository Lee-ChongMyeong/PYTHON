# 22_18) 재귀함수 (함수 정의 안에다가 자기 자신함수 재호출)

# def re_func():
#     print("자기 자신을 재호출?")
#     return re_func()

# re_func()

# 함수는 호출 후, 반환이 끝나기 전까지 메모리에서 계속 사용중(축적되서 메모리 한계치)

#22_19)
# 재귀호출 피보나치 수열
# 피보나치 : 1 + 1 + 2 + 3 + 5 + 8 + 13 + ...
# 즉, 처음 두 항은 1, 세번째 항부터 바로 앞의 두항의 합(첫항 + 두번째항 = 세번째항(1 + 1 = 2))
# 네번째 항: (두번째항 + 세번째항 = 네번째항(1 + 2 = 3))
# n이 0일 때는 0을 리턴, 1일 때는 1을 리턴한다. n이 2 이상일 경우에는 이전의 두 값을 더하여 리턴한다.

'''
1 + 1 + 2 + 3 + 5 + 8 + 13 + ...
-   -   |   |
|___|   |   |
  +     |   |
  |_____|   |
    |___|   |
      +     |
      |_____|
        '''



# def fib(n):
#     list = []
#     for i in range(0, n):
#         if i < 2:
#             list.append(1)
#         else:
#             list.append(list[i-1] + list[i-2])
#     return list[n-1]

# n = int(input("파보나치 수열의 항 : "))
# print(fib(n))


# def fib(n):             # 매개변수 n : 몇번째 항인지를 결정하는 값
#     if n ==0:                           # n이 0일 때, 0 반환
#         return 0                        # n이 1일 때, 1 반환(초항)
#     if n == 1:
#         return 1
#     return fib(n-2) + fib(n-1)              # n을 2이상으로 호출 시 그 이전의 두 항을 더하여 리턴

# n = int(input("피보나치 수열의 항 : "))
# print("피보나치 항 반환 : {}".format(fib(n)))

#22_19)Quiz) 재귀함수로 n!(팩토리얼) 구하기
# 팩토리얼 => 정수 n의 팩토리얼: n! = n * (n-1) * (n-2) * ... * 2 * 1
#                                 = n * (n-1)!
# 예) 5! = 5 * (5-1) * (5-2) * (5-3) * (5-4) => 즉, 5*4*3*2*1
# 0!과 1!은 1로 약속!

def Fac(n):
    
    if n == 0:
        return 1
    else:
        return n * Fac(n-1)

n = int(input("정수n의 : "))
print("정수 {} 의 팩토리얼 ! : {} ".format(n, Fac(n)))